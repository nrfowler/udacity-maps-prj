

    Asynchrony and Error Handling. Note that all data APIs used in the project
    should load asynchronously and errors should be handled gracefully. In case
     of error (e.g. in a situation where a third party API does not return the
     expected result) we expect your webpage to do one of the following: A
     message is displayed notifying the user that the data can't be loaded,
     OR There are no negative repercussions to the UI. Note: Please note that
     we expect students to handle errors if the browser has trouble initially
     reaching the 3rd-party site as well. For example, imagine a user is using
      your Neighborhood Map, but her firewall prevents her from accessing the
      Instagram servers. Here is a reference article on how to block websites
      with the hosts file. It is important to handle errors to give users a
      consistent and good experience with the webpage. Read this blogpost to
      learn more. Some JavaScript libraries provide special methods to handle
      errors. For example: refer to .fail() method discussed here if you use
      jQuery's ajax() method. We strongly encourage you to explore ways to
      handle errors in the library you are using to make API calls.


    All application components render on-screen in a responsive manner.

    Usability


    All application components are usable across modern desktop, tablet, and phone browsers.



    All data requests are retrieved in an asynchronous manner.


    Data requests that fail are handled gracefully using common fallback
    techniques (i.e. AJAX error or fail methods). 'Gracefully' means the
    user isn’t left wondering why a component isn’t working. If an API doesn’t
     load there should be some visible indication on the page (an alert box is
     ok) that it didn’t load. Note: You do not need to handle cases where the
      user goes offline.





    Comments are present and effectively explain longer code procedures.




    Code is formatted with consistent, logical, and easy-to-read formatting as

    described in the Udacity JavaScript Style Guide.
